-- Create a table to store successful matches between two users
CREATE TABLE matches (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  user1_id UUID NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
  user2_id UUID NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
  created_at TIMESTAMPTZ DEFAULT NOW(),
  -- Ensure a user pair is unique
  CONSTRAINT unique_match UNIQUE(user1_id, user2_id)
);

-- Enable Row Level Security
ALTER TABLE matches ENABLE ROW LEVEL SECURITY;

-- Create a policy so users can see the matches they are part of
CREATE POLICY "Users can view their own matches" ON matches
  FOR SELECT USING (auth.uid() = user1_id OR auth.uid() = user2_id);

-- Create a table to store the AI-generated journal entries
CREATE TABLE monster_journal_entries (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  -- Link the entry to a specific match
  match_id BIGINT NOT NULL REFERENCES matches(id) ON DELETE CASCADE,
  -- The AI-generated text content of the journal entry
  entry_text TEXT NOT NULL,
  created_at TIMESTAMPTZ DEFAULT NOW()
);

-- Enable Row Level Security
ALTER TABLE monster_journal_entries ENABLE ROW LEVEL SECURITY;

-- Create a policy allowing users to read journal entries for matches they are part of
CREATE POLICY "Users can read journal entries for their matches" ON monster_journal_entries
  FOR SELECT USING (
    EXISTS (
      SELECT 1 FROM matches
      WHERE matches.id = monster_journal_entries.match_id
      AND (matches.user1_id = auth.uid() OR matches.user2_id = auth.uid())
    )
  );